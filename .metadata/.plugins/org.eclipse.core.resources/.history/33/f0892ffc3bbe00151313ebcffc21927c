#include <iostream>
#include <fstream>
#include <algorithm>
#include <cstring>
#include <vector>
using namespace std;


ifstream fin("input.txt");
ofstream fout("output.txt");

int position[100];
int N;


int dist(int pos1, int pos2){
	if(pos1>N||pos1<0||pos2>N||pos2<0) return -1;
	return abs(position[pos1]-position[pos2]);
}

int blast(int nexttime, int currpos, int currstreak){
	int radius=nexttime;
	int distForward=dist(currpos, currpos+1);
	int distBackward=dist(currpos, currpos-1);
	if(currpos>N||currpos<1||(distForward>radius&&distBackward>radius)){
		return currstreak;
	}
	else{
		for(int i=1;i<N;i++){
			if(dist(currpos, currpos+i)==-1||dist(currpos, currpos+i)>radius){
				break;
			}
			if(dist(currpos, currpos+i)<=radius){
				return blast(radius+1, currpos+i, currstreak+1);
			}
		}
		for(int i=1;i<N;i++){
					if(dist(currpos, currpos-i)==-1||dist(currpos, currpos-i)>radius){
						break;
					}
					if(dist(currpos, currpos-i)<=radius){
						return blast(radius+1, currpos-i, currstreak+1);
					}
		}
		return currstreak;
	}
}

int main(void) {
	fin>>N;
	int maxStreak=0;
	cout<<maxStreak;
	for(int i=0;i<N;i++){
		fin>>position[i];
	}
	for(int i=0;i<N;i++){
		int streak=blast(1, i, 1);
		maxStreak=max(streak, maxStreak);

	}
	fout<<maxStreak;
}




