#include <iostream>
#include <string>
#include <vector>
#include <math.h>
#include <cstdlib>
using namespace std;

/*
 * Java hash function uses x = 31 and doesn't use modulo
 */
unsigned long long polyHash(string S, int prime, int x) {
  unsigned long long hash = 0;
  for (int i = (S.length() - 1); i >= 0; i = i - 1) {
    hash = (hash * x + S[i]) % prime;
  }
  return hash;
}
int* H;

void precomputeHash(string T, string P, int prime, int x) {
  int size = T.length() - P.length() + 1;
  H = new int[size];
  string S = T.substr(size - 1, T.length() - 1);
  H[T.length() - P.length()] = polyHash(S, prime, x);
  int y = 1;
  for (int i = 1; i <= P.length(); i++) {
    y = (y * x) % prime;
  }
  for (int i = T.length() - P.length() - 1; i >= 0; i--) {
    H[i] = (x * H[i + 1] + T[i] - y * T[i + P.length()]) % prime;
  }
}

vector<int> rabinkarp(string T, string P) {
  int prime = 100000007; //big prime
  int x = rand() % (prime - 1) + 1;
  vector<int> result;
  precomputeHash(T, P, prime, x);
  int pHash = polyHash(P, prime, x);
  for (int i = 0; i < T.length() - P.length(); i++) {
    if (pHash != H[i])
      continue;
    if(T.substr(i, i+P.length() -1 ).compare(P)==0) result.push_back(i);


  }
}
vector<string> run() {
  vector<vector<string> > hash;
  vector<string> output;
  int m, queries;
  string type, str;
  hash.resize(m);
  cin >> m >> queries;
  output.resize(queries);
  for (int i = 0; i < queries; i++) {
    cin >> type;
    if (type == "add") {
      cin >> str;
      unsigned long long num = polyHash(str, 10000007, 31);
      for (int i = 0; i < hash.at(num).size(); i++) {
        if (hash.at(num).at(i) == str) {
          break;
        }
      }
      hash.at(num).push_back(str);
    }

    else if (type == "del") {
      cin >> str;
      unsigned long num = polyHash(str);
      for (int i = 0; i < hash.at(num).size(); i++) {
        if (hash.at(num).at(i) == str) {
          hash.at(num).erase(hash.at(num).begin() + i);
        }
      }

    } else if (type == "find") {
      cin >> str;
      unsigned long num = polyHash(str);
      bool yes = false;
      for (int i = 0; i < hash.at(num).size(); i++) {
        if (hash.at(num).at(i) == str) {
          hash.at(num).erase(hash.at(num).begin() + i);
          output.push_back("yes\n");
          yes = true;
        }
      }
      if (!yes)
        output.push_back("no\n");
    } else if (type == "check") {
      int index;
      cin >> index;
      if (index < hash.size()) {
        for (int i = hash.at(index).size() - 1; i >= 0; i--) {
//          cout << hash.at(index).at(i) + " ";
          output.push_back(hash.at(index).at(i) + " ");
        }
      }
      output.push_back("\n");
    }

  }
  return output;
}

void display(vector<string> output) {
  for (int i = 0; i < output.size(); i++) {
    cout << output.at(i);
  }
}

int main() {
  std::ios_base::sync_with_stdio(false);
  vector<string> output = run();
  cout << output.size();
//  display(output);
  return 0;
}

