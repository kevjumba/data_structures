#include <iostream>
using namespace std;

/* This function partitions a[] in three parts
   a) a[l..i] contains all elements smaller than pivot
   b) a[i+1..j-1] contains all occurrences of pivot
   c) a[j..r] contains all elements greater than pivot */
void partition(int a[], int left, int r, int &i, int &j)
{
    i = left-1, j = r;
    int p = left-1, q = r;
    int v = a[r];

    while (true)
    {
        while (a[++i] < v);

        while (v < a[--j])
            if (j == left)
                break;

        if (i >= j) break;

        swap(a[i], a[j]);

        if (a[i] == v)
        {
            p++;
            swap(a[p], a[i]);
        }

        if (a[j] == v)
        {
            q--;
            swap(a[j], a[q]);
        }
    }

    swap(a[i], a[r]);

    j = i-1;
    for (int k = left; k < p; k++, j--)
        swap(a[k], a[j]);
    i = i+1;
    for (int k = r-1; k > q; k--, i++)
        swap(a[i], a[k]);
}

void quicksort(int a[], int l, int r)
{
    if (r <= l) return;

    int i, j;
    partition(a, l, r, i, j);
    quicksort(a, l, j);
    quicksort(a, i, r);
}

void printarr(int a[], int n)
{
    for (int i = 0; i < n; ++i)
        cout<<a[i]+" ";
    cout<<endl;
}

int main()
{
    int N;
    cin>>N;
    int array[N];
    for(int i=0;i<N;i++){
      cin>>array[i];
    }
    printarr(array, N);
    quicksort(array, 0, N - 1);
    printarr(array, N);
    return 0;
}
