#include <iostream>
using namespace std;

/* This function partitions a[] in three parts
   a) a[l..i] contains all elements smaller than pivot
   b) a[i+1..j-1] contains all occurrences of pivot
   c) a[j..r] contains all elements greater than pivot */
void partition(int array[], int left, int right, int &m1, int &m2)
{
    m1 = left-1, m2 = right;
    int p = left-1, q = right;
    int v = array[right];

    while (true)
    {
        while (array[++m1] < v);

        while (v < array[--m2])
            if (m2 == left)
                break;

        if (m1 >= m2) break;

        swap(array[m1], array[m2]);

        if (array[m1] == v)
        {
            p++;
            swap(array[p], array[m1]);
        }

        if (array[m2] == v)
        {
            q--;
            swap(array[m2], array[q]);
        }
    }

    swap(array[m1], array[right]);

    m2 = m1-1;
    for (int k = left; k < p; k++, m2--)
        swap(array[k], array[m2]);
    m1 = m1+1;
    for (int k = right-1; k > q; k--, m1++)
        swap(array[m1], array[k]);
}

void quicksort(int a[], int l, int r)
{
    if (r <= l) return;
    int i, j;
    partition(a, l, r, i, j);
    quicksort(a, l, j);
    quicksort(a, i, r);
}

void printarr(int a[], int n)
{
    for (int i = 0; i < n; ++i)
        cout<<a[i]+" ";
    cout<<endl;
}

int main()
{
    int N;
    cin>>N;
    int array[N];
    for(int i=0;i<N;i++){
      cin>>array[i];
    }
    printarr(array, N);
    quicksort(array, 0, N - 1);
    printarr(array, N);
    return 0;
}
